{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nvar firebaseConfig = {\n  apiKey: \"AIzaSyBoOSBkJan9g7tcaj9DXQJEboClBJrBdDk\",\n  authDomain: \"react-shop-a5bdd.firebaseapp.com\",\n  databaseURL: \"https://react-shop-a5bdd.firebaseio.com\",\n  projectId: \"react-shop-a5bdd\",\n  storageBucket: \"react-shop-a5bdd.appspot.com\",\n  messagingSenderId: \"76107538522\",\n  appId: \"1:76107538522:web:4dda95f69443880f21b863\"\n}; // Initialize Firebase\n\nfirebase.initializeApp(firebaseConfig); // creating an user account in the firestore\n\nexport const createUserProfile = async (userAuth, addInfo) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapshot = await userRef.get();\n\n  if (!snapshot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...addInfo\n      });\n    } catch (error) {}\n  }\n\n  return userRef;\n};\nexport const getPopularProducts = collections => {};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore(); // using google auth to sign in the user\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/user/Desktop/REACT/pamoka/src/firebase/firebase.js"],"names":["firebase","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","initializeApp","createUserProfile","userAuth","addInfo","userRef","firestore","doc","uid","snapshot","get","exists","displayName","email","createdAt","Date","set","error","getPopularProducts","collections","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,IAAIC,cAAc,GAAG;AACnBC,EAAAA,MAAM,EAAE,yCADW;AAEnBC,EAAAA,UAAU,EAAE,kCAFO;AAGnBC,EAAAA,WAAW,EAAE,yCAHM;AAInBC,EAAAA,SAAS,EAAE,kBAJQ;AAKnBC,EAAAA,aAAa,EAAE,8BALI;AAMnBC,EAAAA,iBAAiB,EAAE,aANA;AAOnBC,EAAAA,KAAK,EAAE;AAPY,CAArB,C,CASA;;AACAR,QAAQ,CAACS,aAAT,CAAuBR,cAAvB,E,CAEA;;AACA,OAAO,MAAMS,iBAAiB,GAAG,OAAOC,QAAP,EAAiBC,OAAjB,KAA6B;AAC5D,MAAI,CAACD,QAAL,EAAe;AAEf,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AAEA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB;;AAEA,MAAI,CAACD,QAAQ,CAACE,MAAd,EAAsB;AACpB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBV,QAA/B;AACA,UAAMW,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAI;AACF,YAAMV,OAAO,CAACW,GAAR,CAAY;AAChBJ,QAAAA,WADgB;AAEhBC,QAAAA,KAFgB;AAGhBC,QAAAA,SAHgB;AAIhB,WAAGV;AAJa,OAAZ,CAAN;AAMD,KAPD,CAOE,OAAOa,KAAP,EAAc,CAAE;AACnB;;AACD,SAAOZ,OAAP;AACD,CArBM;AAuBP,OAAO,MAAMa,kBAAkB,GAAIC,WAAD,IAAiB,CAElD,CAFM;AAIP,OAAO,MAAMC,IAAI,GAAG5B,QAAQ,CAAC4B,IAAT,EAAb;AACP,OAAO,MAAMd,SAAS,GAAGd,QAAQ,CAACc,SAAT,EAAlB,C,CAEP;;AACA,MAAMe,QAAQ,GAAG,IAAI7B,QAAQ,CAAC4B,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAe7B,QAAf","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyBoOSBkJan9g7tcaj9DXQJEboClBJrBdDk\",\n  authDomain: \"react-shop-a5bdd.firebaseapp.com\",\n  databaseURL: \"https://react-shop-a5bdd.firebaseio.com\",\n  projectId: \"react-shop-a5bdd\",\n  storageBucket: \"react-shop-a5bdd.appspot.com\",\n  messagingSenderId: \"76107538522\",\n  appId: \"1:76107538522:web:4dda95f69443880f21b863\",\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\n// creating an user account in the firestore\nexport const createUserProfile = async (userAuth, addInfo) => {\n  if (!userAuth) return;\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n\n  const snapshot = await userRef.get();\n\n  if (!snapshot.exists) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...addInfo,\n      });\n    } catch (error) {}\n  }\n  return userRef;\n};\n\nexport const getPopularProducts = (collections) => {\n  \n}\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\n// using google auth to sign in the user\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: \"select_account\" });\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}